<?php
/**
 * Plan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stage Technologies, Inc. API
 *
 * Stage Technologies, Inc. API  Useful links: - [Stage](https://www.heystage.com/)
 *
 * The version of the OpenAPI document: 0.0.44
 * Contact: stage@heystage.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Plan Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Plan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'identifier' => 'string',
        'name' => 'string',
        'description' => 'string',
        'stripe_product_id' => 'string',
        'monthly_stripe_price_id' => 'string',
        'monthly_currency' => 'string',
        'monthly_unit_amount' => 'float',
        'monthly_pricing_type' => 'string',
        'yearly_stripe_price_id' => 'string',
        'yearly_currency' => 'string',
        'yearly_unit_amount' => 'float',
        'yearly_pricing_type' => 'string',
        'draft' => 'bool',
        'features' => '\OpenAPI\Client\Model\PlanFeatures',
        'is_trial_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'identifier' => null,
        'name' => null,
        'description' => null,
        'stripe_product_id' => null,
        'monthly_stripe_price_id' => null,
        'monthly_currency' => null,
        'monthly_unit_amount' => 'float',
        'monthly_pricing_type' => null,
        'yearly_stripe_price_id' => null,
        'yearly_currency' => null,
        'yearly_unit_amount' => 'float',
        'yearly_pricing_type' => null,
        'draft' => null,
        'features' => null,
        'is_trial_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'identifier' => false,
		'name' => false,
		'description' => true,
		'stripe_product_id' => true,
		'monthly_stripe_price_id' => true,
		'monthly_currency' => true,
		'monthly_unit_amount' => true,
		'monthly_pricing_type' => true,
		'yearly_stripe_price_id' => true,
		'yearly_currency' => true,
		'yearly_unit_amount' => true,
		'yearly_pricing_type' => true,
		'draft' => false,
		'features' => false,
		'is_trial_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identifier' => 'identifier',
        'name' => 'name',
        'description' => 'description',
        'stripe_product_id' => 'stripeProductId',
        'monthly_stripe_price_id' => 'monthlyStripePriceId',
        'monthly_currency' => 'monthlyCurrency',
        'monthly_unit_amount' => 'monthlyUnitAmount',
        'monthly_pricing_type' => 'monthlyPricingType',
        'yearly_stripe_price_id' => 'yearlyStripePriceId',
        'yearly_currency' => 'yearlyCurrency',
        'yearly_unit_amount' => 'yearlyUnitAmount',
        'yearly_pricing_type' => 'yearlyPricingType',
        'draft' => 'draft',
        'features' => 'features',
        'is_trial_enabled' => 'isTrialEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identifier' => 'setIdentifier',
        'name' => 'setName',
        'description' => 'setDescription',
        'stripe_product_id' => 'setStripeProductId',
        'monthly_stripe_price_id' => 'setMonthlyStripePriceId',
        'monthly_currency' => 'setMonthlyCurrency',
        'monthly_unit_amount' => 'setMonthlyUnitAmount',
        'monthly_pricing_type' => 'setMonthlyPricingType',
        'yearly_stripe_price_id' => 'setYearlyStripePriceId',
        'yearly_currency' => 'setYearlyCurrency',
        'yearly_unit_amount' => 'setYearlyUnitAmount',
        'yearly_pricing_type' => 'setYearlyPricingType',
        'draft' => 'setDraft',
        'features' => 'setFeatures',
        'is_trial_enabled' => 'setIsTrialEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identifier' => 'getIdentifier',
        'name' => 'getName',
        'description' => 'getDescription',
        'stripe_product_id' => 'getStripeProductId',
        'monthly_stripe_price_id' => 'getMonthlyStripePriceId',
        'monthly_currency' => 'getMonthlyCurrency',
        'monthly_unit_amount' => 'getMonthlyUnitAmount',
        'monthly_pricing_type' => 'getMonthlyPricingType',
        'yearly_stripe_price_id' => 'getYearlyStripePriceId',
        'yearly_currency' => 'getYearlyCurrency',
        'yearly_unit_amount' => 'getYearlyUnitAmount',
        'yearly_pricing_type' => 'getYearlyPricingType',
        'draft' => 'getDraft',
        'features' => 'getFeatures',
        'is_trial_enabled' => 'getIsTrialEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MONTHLY_PRICING_TYPE_ONE_TIME = 'one_time';
    public const MONTHLY_PRICING_TYPE_RECURRING = 'recurring';
    public const YEARLY_PRICING_TYPE_ONE_TIME = 'one_time';
    public const YEARLY_PRICING_TYPE_RECURRING = 'recurring';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMonthlyPricingTypeAllowableValues()
    {
        return [
            self::MONTHLY_PRICING_TYPE_ONE_TIME,
            self::MONTHLY_PRICING_TYPE_RECURRING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getYearlyPricingTypeAllowableValues()
    {
        return [
            self::YEARLY_PRICING_TYPE_ONE_TIME,
            self::YEARLY_PRICING_TYPE_RECURRING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('stripe_product_id', $data ?? [], null);
        $this->setIfExists('monthly_stripe_price_id', $data ?? [], null);
        $this->setIfExists('monthly_currency', $data ?? [], null);
        $this->setIfExists('monthly_unit_amount', $data ?? [], null);
        $this->setIfExists('monthly_pricing_type', $data ?? [], null);
        $this->setIfExists('yearly_stripe_price_id', $data ?? [], null);
        $this->setIfExists('yearly_currency', $data ?? [], null);
        $this->setIfExists('yearly_unit_amount', $data ?? [], null);
        $this->setIfExists('yearly_pricing_type', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('is_trial_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMonthlyPricingTypeAllowableValues();
        if (!is_null($this->container['monthly_pricing_type']) && !in_array($this->container['monthly_pricing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'monthly_pricing_type', must be one of '%s'",
                $this->container['monthly_pricing_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getYearlyPricingTypeAllowableValues();
        if (!is_null($this->container['yearly_pricing_type']) && !in_array($this->container['yearly_pricing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'yearly_pricing_type', must be one of '%s'",
                $this->container['yearly_pricing_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets stripe_product_id
     *
     * @return string|null
     */
    public function getStripeProductId()
    {
        return $this->container['stripe_product_id'];
    }

    /**
     * Sets stripe_product_id
     *
     * @param string|null $stripe_product_id stripe_product_id
     *
     * @return self
     */
    public function setStripeProductId($stripe_product_id)
    {
        if (is_null($stripe_product_id)) {
            array_push($this->openAPINullablesSetToNull, 'stripe_product_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stripe_product_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stripe_product_id'] = $stripe_product_id;

        return $this;
    }

    /**
     * Gets monthly_stripe_price_id
     *
     * @return string|null
     */
    public function getMonthlyStripePriceId()
    {
        return $this->container['monthly_stripe_price_id'];
    }

    /**
     * Sets monthly_stripe_price_id
     *
     * @param string|null $monthly_stripe_price_id monthly_stripe_price_id
     *
     * @return self
     */
    public function setMonthlyStripePriceId($monthly_stripe_price_id)
    {
        if (is_null($monthly_stripe_price_id)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_stripe_price_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_stripe_price_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthly_stripe_price_id'] = $monthly_stripe_price_id;

        return $this;
    }

    /**
     * Gets monthly_currency
     *
     * @return string|null
     */
    public function getMonthlyCurrency()
    {
        return $this->container['monthly_currency'];
    }

    /**
     * Sets monthly_currency
     *
     * @param string|null $monthly_currency Lower case of ISO 4217: https://www.iso.org/iso-4217-currency-codes.html.
     *
     * @return self
     */
    public function setMonthlyCurrency($monthly_currency)
    {
        if (is_null($monthly_currency)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthly_currency'] = $monthly_currency;

        return $this;
    }

    /**
     * Gets monthly_unit_amount
     *
     * @return float|null
     */
    public function getMonthlyUnitAmount()
    {
        return $this->container['monthly_unit_amount'];
    }

    /**
     * Sets monthly_unit_amount
     *
     * @param float|null $monthly_unit_amount Amount in cent
     *
     * @return self
     */
    public function setMonthlyUnitAmount($monthly_unit_amount)
    {
        if (is_null($monthly_unit_amount)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_unit_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_unit_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthly_unit_amount'] = $monthly_unit_amount;

        return $this;
    }

    /**
     * Gets monthly_pricing_type
     *
     * @return string|null
     */
    public function getMonthlyPricingType()
    {
        return $this->container['monthly_pricing_type'];
    }

    /**
     * Sets monthly_pricing_type
     *
     * @param string|null $monthly_pricing_type monthly_pricing_type
     *
     * @return self
     */
    public function setMonthlyPricingType($monthly_pricing_type)
    {
        if (is_null($monthly_pricing_type)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_pricing_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_pricing_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMonthlyPricingTypeAllowableValues();
        if (!is_null($monthly_pricing_type) && !in_array($monthly_pricing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'monthly_pricing_type', must be one of '%s'",
                    $monthly_pricing_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['monthly_pricing_type'] = $monthly_pricing_type;

        return $this;
    }

    /**
     * Gets yearly_stripe_price_id
     *
     * @return string|null
     */
    public function getYearlyStripePriceId()
    {
        return $this->container['yearly_stripe_price_id'];
    }

    /**
     * Sets yearly_stripe_price_id
     *
     * @param string|null $yearly_stripe_price_id yearly_stripe_price_id
     *
     * @return self
     */
    public function setYearlyStripePriceId($yearly_stripe_price_id)
    {
        if (is_null($yearly_stripe_price_id)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_stripe_price_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_stripe_price_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearly_stripe_price_id'] = $yearly_stripe_price_id;

        return $this;
    }

    /**
     * Gets yearly_currency
     *
     * @return string|null
     */
    public function getYearlyCurrency()
    {
        return $this->container['yearly_currency'];
    }

    /**
     * Sets yearly_currency
     *
     * @param string|null $yearly_currency Lower case of ISO 4217: https://www.iso.org/iso-4217-currency-codes.html.
     *
     * @return self
     */
    public function setYearlyCurrency($yearly_currency)
    {
        if (is_null($yearly_currency)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearly_currency'] = $yearly_currency;

        return $this;
    }

    /**
     * Gets yearly_unit_amount
     *
     * @return float|null
     */
    public function getYearlyUnitAmount()
    {
        return $this->container['yearly_unit_amount'];
    }

    /**
     * Sets yearly_unit_amount
     *
     * @param float|null $yearly_unit_amount Amount in cent
     *
     * @return self
     */
    public function setYearlyUnitAmount($yearly_unit_amount)
    {
        if (is_null($yearly_unit_amount)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_unit_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_unit_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearly_unit_amount'] = $yearly_unit_amount;

        return $this;
    }

    /**
     * Gets yearly_pricing_type
     *
     * @return string|null
     */
    public function getYearlyPricingType()
    {
        return $this->container['yearly_pricing_type'];
    }

    /**
     * Sets yearly_pricing_type
     *
     * @param string|null $yearly_pricing_type yearly_pricing_type
     *
     * @return self
     */
    public function setYearlyPricingType($yearly_pricing_type)
    {
        if (is_null($yearly_pricing_type)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_pricing_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_pricing_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getYearlyPricingTypeAllowableValues();
        if (!is_null($yearly_pricing_type) && !in_array($yearly_pricing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'yearly_pricing_type', must be one of '%s'",
                    $yearly_pricing_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['yearly_pricing_type'] = $yearly_pricing_type;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool|null
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool|null $draft draft
     *
     * @return self
     */
    public function setDraft($draft)
    {
        if (is_null($draft)) {
            throw new \InvalidArgumentException('non-nullable draft cannot be null');
        }
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \OpenAPI\Client\Model\PlanFeatures|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \OpenAPI\Client\Model\PlanFeatures|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets is_trial_enabled
     *
     * @return bool|null
     */
    public function getIsTrialEnabled()
    {
        return $this->container['is_trial_enabled'];
    }

    /**
     * Sets is_trial_enabled
     *
     * @param bool|null $is_trial_enabled is_trial_enabled
     *
     * @return self
     */
    public function setIsTrialEnabled($is_trial_enabled)
    {
        if (is_null($is_trial_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_trial_enabled cannot be null');
        }
        $this->container['is_trial_enabled'] = $is_trial_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


